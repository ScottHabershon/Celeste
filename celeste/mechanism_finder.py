#
############################################################################
#
# Celeste - chemical reaction discovery code.
# Copyright (C) 2021, Scott Habershon
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#
############################################################################


"""Graph-based mechanism generation routines.

This module contains the main mechanism-finding routines used in the Habershon group's
mechanism searching research.

This module implements either double-ended mechanism-finding or single-ended mechanism generation.
"""

import sys
import celeste.cxs as cx
import celeste.reactionpath as rpath
import numpy as np

class Mechanism:
    """Defines the ``Mechanism`` object as a container for a double-ended reaction mechanism.

    This module contains the ``Mechanism`` object, as well as related mechanism-finding routines. These routines
    implement the double-ended mechanism-finding approach, as well as a single-ended
    mechanism generation scheme, both as developed in the Habershon group.

    Args:
        reactantfile (str) : Structure containing the initial reactant file.
        productfile (str,optional) : Structure containing the target product file (used in the case of
            double-ended mechanisms search).
        maxreactions (int) : Maximum number of allowed reactions in the mechanism (including
            non-progressing null reactions).
    """

    def __init__(self, reactantfile = None, productfile = None, maxreactions = 1,valenceranges=[]):
        """Initializes a ``Mechanism`` object.
        """

        # Total maximum number of structures in the mechanism, including reactants plus all
        # intermediates generated by maxreactions reactions:
        self.nr = 1 + maxreactions

        # First, create reactant structure.
        self.cxm = []
        self.cxm.append( cx.CXS(FileName=reactantfile) )

        # Next, copy reactant structure to all other structures as a way of initializing.
        for i in range(maxreactions):
            self.cxm.append( self.cxm[0] )

        # If the product file is defined, store the target product structure:
        if productfile:
            self.cxp = cx.CXS( FileName = productfile )

        # set valence ranges of each atom in each cx


    def RunMechanismFinder(self, moves=None, nsaiterations = 100, SAInitialTemperature = 100.0):
        """Performs a double-ended reaction-mechanism search.

        Returns:

        """




